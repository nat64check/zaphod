# Generated by Django 2.0.7 on 2018-07-07 19:36

import django.contrib.postgres.fields
import django.utils.datetime_safe
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import measurements.utils


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('instances', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InstanceRun',
            fields=[
                ('id', models.AutoField(
                    auto_created=True,
                    primary_key=True,
                    serialize=False,
                    verbose_name='ID')),
                ('id_on_trillian', models.PositiveIntegerField(
                    blank=True,
                    null=True,
                    verbose_name='ID on Trillian')),
                ('callback_auth_code', models.CharField(
                    default=measurements.utils.generate_random_token,
                    max_length=50,
                    verbose_name='callback auth code')),
                ('requested', models.DateTimeField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='requested')),
                ('started', models.DateTimeField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='started')),
                ('finished', models.DateTimeField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='finished')),
                ('dns_results', django.contrib.postgres.fields.ArrayField(
                    base_field=models.GenericIPAddressField(),
                    blank=True,
                    default=list,
                    size=None,
                    verbose_name='DNS results')),
                ('image_score', models.FloatField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='image score')),
                ('image_feedback', models.TextField(
                    blank=True,
                    verbose_name='image feedback')),
                ('resource_score', models.FloatField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='resource score')),
                ('resource_feedback', models.TextField(
                    blank=True,
                    verbose_name='resource feedback')),
                ('overall_score', models.FloatField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='overall score')),
                ('overall_feedback', models.TextField(
                    blank=True,
                    verbose_name='overall feedback')),
            ],
            options={
                'verbose_name': 'instance run',
                'verbose_name_plural': 'instance runs',
            },
        ),
        migrations.CreateModel(
            name='InstanceRunMessage',
            fields=[
                ('id', models.AutoField(
                    auto_created=True,
                    primary_key=True,
                    serialize=False,
                    verbose_name='ID')),
                ('severity', models.PositiveSmallIntegerField(
                    choices=[(50, 'Critical'), (40, 'Error'), (30, 'Warning'), (20, 'Info'), (10, 'Debug')],
                    verbose_name='severity')),
                ('message', models.CharField(
                    max_length=200,
                    verbose_name='message')),
                ('instancerun', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='messages',
                    to='measurements.InstanceRun',
                    verbose_name='instance run')),
            ],
            options={
                'verbose_name': 'instance run message',
                'verbose_name_plural': 'instance run messages',
                'ordering': ('instancerun', '-severity'),
            },
        ),
        migrations.CreateModel(
            name='InstanceRunResult',
            fields=[
                ('id', models.AutoField(
                    auto_created=True,
                    primary_key=True,
                    serialize=False,
                    verbose_name='ID')),
                ('pings', django.contrib.postgres.fields.jsonb.JSONField()),
                ('web_response', django.contrib.postgres.fields.jsonb.JSONField()),
                ('instancerun', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='results',
                    to='measurements.InstanceRun',
                    verbose_name='instance run')),
                ('marvin', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    to='instances.Marvin',
                    verbose_name='Marvin')),
            ],
            options={
                'verbose_name': 'instance run result',
                'verbose_name_plural': 'instance run results',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(
                    auto_created=True,
                    primary_key=True,
                    serialize=False,
                    verbose_name='ID')),
                ('name', models.CharField(
                    help_text='Name your test schedule, must be unique',
                    max_length=100,
                    verbose_name='name')),
                ('url', models.URLField(
                    db_index=True,
                    help_text='The URL you want to test',
                    verbose_name='URL')),
                ('time', models.TimeField(
                    help_text='The time of day in UTC when you want the tests to be scheduled',
                    verbose_name='time')),
                ('start', models.DateField(
                    default=django.utils.datetime_safe.date.today,
                    help_text='The first day that you want the tests to be run',
                    verbose_name='start')),
                ('end', models.DateField(
                    blank=True,
                    help_text='The last day that you want the tests to be run',
                    null=True,
                    verbose_name='end')),
                ('frequency', models.CharField(
                    choices=[('D', 'Every day'), ('W', 'Every week'), ('M', 'Every month')],
                    help_text='Frequency to schedule the tests. Can be "D" (daily), "W" (weekly) or "M" (monthly)',
                    max_length=1,
                    verbose_name='frequency')),
                ('is_public', models.BooleanField(
                    default=True,
                    help_text='Whether the test results should be publicly visible',
                    verbose_name='is public')),
                ('owner', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='owner')),
                ('trillians', models.ManyToManyField(
                    help_text='The data centres from where you want this URL to be tested',
                    to='instances.Trillian',
                    verbose_name='Trillians')),
            ],
            options={
                'verbose_name': 'schedule',
                'verbose_name_plural': 'schedules',
                'ordering': ('start', 'end'),
            },
        ),
        migrations.CreateModel(
            name='TestRun',
            fields=[
                ('id', models.AutoField(
                    auto_created=True,
                    primary_key=True,
                    serialize=False,
                    verbose_name='ID')),
                ('url', models.URLField(
                    db_index=True,
                    verbose_name='URL')),
                ('requested', models.DateTimeField(
                    db_index=True,
                    default=django.utils.timezone.now,
                    verbose_name='requested')),
                ('started', models.DateTimeField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='started')),
                ('finished', models.DateTimeField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='finished')),
                ('is_public', models.BooleanField(
                    default=True,
                    verbose_name='is public')),
                ('image_score', models.FloatField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='image score')),
                ('image_feedback', models.TextField(
                    blank=True,
                    verbose_name='image feedback')),
                ('resource_score', models.FloatField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='resource score')),
                ('resource_feedback', models.TextField(
                    blank=True,
                    verbose_name='resource feedback')),
                ('overall_score', models.FloatField(
                    blank=True,
                    db_index=True,
                    null=True,
                    verbose_name='overall score')),
                ('overall_feedback', models.TextField(
                    blank=True,
                    verbose_name='overall feedback')),
                ('owner', models.ForeignKey(
                    blank=True,
                    null=True,
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='testruns',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='owner')),
                ('schedule', models.ForeignKey(
                    blank=True,
                    null=True,
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='testruns',
                    to='measurements.Schedule',
                    verbose_name='schedule')),
            ],
            options={
                'verbose_name': 'test run',
                'verbose_name_plural': 'test runs',
            },
        ),
        migrations.CreateModel(
            name='TestRunMessage',
            fields=[
                ('id', models.AutoField(
                    auto_created=True,
                    primary_key=True,
                    serialize=False,
                    verbose_name='ID')),
                ('severity', models.PositiveSmallIntegerField(
                    choices=[(50, 'Critical'), (40, 'Error'), (30, 'Warning'), (20, 'Info'), (10, 'Debug')],
                    verbose_name='severity')),
                ('message', models.CharField(
                    max_length=200,
                    verbose_name='message')),
                ('testrun', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='messages',
                    to='measurements.TestRun',
                    verbose_name='test run')),
            ],
            options={
                'verbose_name': 'test run message',
                'verbose_name_plural': 'test run messages',
                'ordering': ('testrun', '-severity'),
            },
        ),
        migrations.AddField(
            model_name='instancerun',
            name='testrun',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='instanceruns',
                to='measurements.TestRun',
                verbose_name='test run'),
        ),
        migrations.AddField(
            model_name='instancerun',
            name='trillian',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to='instances.Trillian',
                verbose_name='Trillian'),
        ),
        migrations.AlterUniqueTogether(
            name='schedule',
            unique_together={('owner', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='instancerun',
            unique_together={('testrun', 'trillian')},
        ),
    ]
